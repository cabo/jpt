jptgrammar = jsonpath-query S {
  def ast
    jsonpath_query.ast
  end
}

jsonpath-query      = root-identifier segments {
  def ast
    ["$", *segments.ast]
  end
}
segments            = *(S segment) {
  def ast
    elements.map(&:segment).map(&:ast)
  end
}

B                   = %x20 /    ; Space
                      %x09 /    ; Horizontal tab
                      %x0A /    ; Line feed or New line
                      %x0D      ; Carriage return
S                   = *B        ; optional blank space
root-identifier     = "$"


selector            = name-selector  /
                      wildcard-selector /
                      slice-selector /
                      index-selector /
                      filter-selector


name-selector       = string-literal

string-literal      = %x22 *double-quoted %x22 {
  def ast
    elements[1].elements.map(&:ast).join
  end
}/     ; "string"
                      %x27 *single-quoted %x27 {
  def ast
    elements[1].elements.map(&:ast).join
  end
}      ; 'string'

double-quoted       = unescaped /
                      %x27 {def ast; "'" end }     /                    ; '
                      ESC %x22 {def ast; '"' end } /                    ; \"
                      ESC escapable {def ast; escapable.ast end }

single-quoted       = unescaped /
                      %x22 {def ast; '"' end }     /                    ; "
                      ESC %x27 {def ast; "'" end } /                    ; \'
                      ESC escapable {def ast; escapable.ast end }

ESC                 = %x5C                           ; \  backslash

unescaped           = (%x20-21 /                      ; see RFC 8259
                         ; omit 0x22 "
                      %x23-26 /
                         ; omit 0x27 ' (')
                      %x28-5B /
                         ; omit 0x5C \
                      %x5D-D7FF /   ; skip surrogate code points
                      %xE000-10FFFF){
  def ast
    text_value
  end
}

escapable           = %x62{def ast; "\b" end } / ; b BS backspace U+0008
                      %x66{def ast; "\f" end } / ; f FF form feed U+000C
                      %x6E{def ast; "\n" end } / ; n LF line feed U+000A
                      %x72{def ast; "\r" end } / ; r CR carriage return U+000D
                      %x74{def ast; "\t" end } / ; t HT horizontal tab U+0009
                      "/" {def ast; "/" end } / ; / slash (solidus) U+002F
                      "\" {def ast; "\\" end } / ; \ backslash (reverse solidus) U+005C
                      (%x75 hexchar){
                        def ast; hexchar.ast.chr(Encoding::UTF_8) end
                      } ;  uXXXX      U+XXXX

hexchar             = non-surrogate {
  def ast; text_value.to_i(16) end
}/
                      (high-surrogate "\" %x75 low-surrogate) { # "
                       def ast
                         ((elements[0].text_value.to_i(16) & 0x3FF) << 10) +
                          (elements[3].text_value.to_i(16) & 0x3FF) + 0x10000
                       end }
non-surrogate       = ((DIGIT / "A"/"B"/"C" / "E"/"F") 3HEXDIG) /
                       ("D" %x30-37 2HEXDIG )
high-surrogate      = "D" ("8"/"9"/"A"/"B") 2HEXDIG
low-surrogate       = "D" ("C"/"D"/"E"/"F") 2HEXDIG

HEXDIG              = DIGIT / "A" / "B" / "C" / "D" / "E" / "F"


wildcard-selector   = "*" { def ast; ["wild"] end }


index-selector      = int { def ast; text_value.to_i end }                       ; decimal integer

int                 = "0" /
                      (["-"] DIGIT1 *DIGIT)      ; - optional
DIGIT1              = %x31-39                    ; 1-9 non-zero digit


slice-selector      = [start S] ":" S [end S] [":" [S step ]] {
  def ast
    ["slice", 
     elements[0]&.elements&.[](0)&.text_value&.to_i,
     elements[3]&.elements&.[](0)&.text_value&.to_i,
     elements[4]&.elements&.[](1)&.elements&.[](1)&.text_value&.to_i
    ]
  end
}

start               = int       ; included in selection
end                 = int       ; not included in selection
step                = int       ; default: 1
filter-selector     = "?" S logical-expr {
  def ast
    ["filt", logical_expr.ast]
  end
}


logical-expr        = logical-or-expr
logical-or-expr     = logical-and-expr *(S "||" S logical-and-expr) {
  def ast
    if elements[1].text_value == ''
      elements[0].ast
    else
      ["or", elements[0].ast, *elements[1].elements.map{|el| el.elements[3].ast}]
    end
  end
}
                        ; disjunction
                        ; binds less tightly than conjunction
logical-and-expr    = basic-expr *(S "&&" S basic-expr) {
  def ast
    if elements[1].text_value == ''
      elements[0].ast
    else
      ["and", elements[0].ast, *elements[1].elements.map{|el| el.elements[3].ast}]
    end
  end
}
                        ; conjunction
                        ; binds more tightly than disjunction

basic-expr          = paren-expr /
                      comparison-expr /
                      test-expr

paren-expr          = [logical-not-op S] "(" S logical-expr S ")" {
  def ast
    if elements[0].text_value == ''
      elements[3].ast
    else
      ["not", elements[3].ast]
    end
  end
}
                                        ; parenthesized expression
logical-not-op      = "!"               ; logical NOT operator


test-expr           = [logical-not-op S]
                      (filter-query / ; existence/non-existence
                       function-expr) {
  def ast
    nest_ast = elements[1].ast
    if nest_ast[0] == "func"
      declared_as(nest_ast, :logical, " in test expression")
    end
    if elements[0].text_value == ''
      nest_ast
    else
      ["not", nest_ast]
    end
  end
}; LogicalType or NodesType
filter-query         = rel-query / jsonpath-query
rel-query            = current-node-identifier segments {
  def ast
    ["@", *segments.ast]
  end
}
current-node-identifier = "@"


comparison-expr     = comparable S comparison-op S comparable {
  def ast
    sides = [elements[0].ast, elements[4].ast]
    sides.each do |s|
      declared_as(s, :value, " in comparable")
    end
    [comparison_op.text_value, *sides]
  end
}
literal             = number / string-literal /
                      true / false / null
comparable          = literal /
                      singular-query / ; singular query value
                      function-expr    ; ValueType
comparison-op       = "==" / "!=" /
                      "<=" / ">=" /
                      "<"  / ">"

singular-query       = rel-singular-query / abs-singular-query
rel-singular-query   = current-node-identifier singular-query-segments {
  def ast
    ["@", *singular_query_segments.ast]
  end
}
abs-singular-query   = root-identifier singular-query-segments {
  def ast
    ["$", *singular_query_segments.ast]
  end
}
singular-query-segments = *(S (name-segment / index-segment)){
  def ast
    elements.map{|el| el.elements[1]}.map(&:ast)
  end
}
name-segment        = ("[" name-selector "]") {
  def ast
    elements[1].ast
  end
}/
                      ("." member-name-shorthand){
  def ast
    elements[1].ast
  end
}
index-segment       = "[" index-selector "]"{
  def ast
    elements[1].ast
  end
}


number              = (int / "-0") [ frac ] [ exp ] {
  def ast
    if elements[0].text_value == "-0" ||
       elements[1].text_value != "" ||
       elements[2].text_value != ""
      text_value.to_f
    else
      text_value.to_i
    end
  end
}; decimal number
frac                = "." 1*DIGIT                  ; decimal fraction
exp                 = "e" [ "-" / "+" ] 1*DIGIT    ; decimal exponent
true                = %x74.72.75.65    {def ast; true end }            ; true
false               = %x66.61.6c.73.65 {def ast; false end }            ; false
null                = %x6e.75.6c.6c    {def ast; nil end }            ; null


function-name       = function-name-first *function-name-char
function-name-first = LCALPHA
function-name-char  = function-name-first / "_" / DIGIT
LCALPHA             = %x61-7A  ; "a".."z"

function-expr       = function-name "(" S [function-argument
                         *(S "," S function-argument)] S ")" {
  def ast
    args = []
    if opt = elements[3].elements
      args = [opt[0].ast,
              *(opt[1].elements.map(&:function_argument).map(&:ast))]
    end
    ["func", function_name.text_value, *args]
  end
}
function-argument   = literal /
                      filter-query / ; (includes singular-query)
                      logical-expr /
                      function-expr


segment             = child-segment / descendant-segment


child-segment       = bracketed-selection /
                      ("."
                       (wildcard-selector /
                        member-name-shorthand)) {
  def ast
    elements[1].ast
  end
}

bracketed-selection = "[" S selector *(S "," S selector) S "]" {
  def ast
    first_ast = elements[2].ast
    if elements[3].text_value == ''
      first_ast
    else
      ["u", first_ast, *elements[3].elements.map{|el| el.elements[3].ast}]
    end
  end
}

member-name-shorthand = name-first *name-char {
  def ast
    text_value
  end
}
name-first          = ALPHA /
                      "_"   /
                      %x80-D7FF /   ; skip surrogate code points
                      %xE000-10FFFF
name-char           = name-first / DIGIT

DIGIT               = %x30-39              ; 0-9
ALPHA               = %x41-5A / %x61-7A    ; A-Z / a-z


descendant-segment  = ".." (bracketed-selection /
                            wildcard-selector /
                            member-name-shorthand) {
  def ast
    ["desc", elements[1].ast]
  end
}


normalized-path      = root-identifier *(normal-index-segment)
normal-index-segment = "[" normal-selector "]"
normal-selector      = normal-name-selector / normal-index-selector
normal-name-selector = %x27 *normal-single-quoted %x27 ; 'string'
normal-single-quoted = normal-unescaped /
                       ESC normal-escapable
normal-unescaped     =    ; omit %x0-1F control codes
                       %x20-26 /
                          ; omit 0x27 '
                       %x28-5B /
                          ; omit 0x5C \
                       %x5D-10FFFF
normal-escapable     = %x62 / ; b BS backspace U+0008
                       %x66 / ; f FF form feed U+000C
                       %x6E / ; n LF line feed U+000A
                       %x72 / ; r CR carriage return U+000D
                       %x74 / ; t HT horizontal tab U+0009
                       "'" /  ; ' apostrophe U+0027
                       "\" /  ; \ backslash (reverse solidus) U+005C
                       (%x75 normal-hexchar)
                                       ; certain values u00xx U+00XX
normal-hexchar       = "0" "0"
                       (
                          ("0" %x30-37) / ; "00"-"07"
                             ; omit U+0008-U+000A BS HT LF
                          ("0" %x62) /    ; "0b"
                             ; omit U+000C-U+000D FF CR
                          ("0" %x65-66) / ; "0e"-"0f"
                          ("1" normal-HEXDIG)
                        )
normal-HEXDIG        = DIGIT / %x61-66    ; "0"-"9", "a"-"f"
normal-index-selector = "0" / (DIGIT1 *DIGIT)
                        ; non-negative decimal integer
